// https://www.acmicpc.net/problem/1052
/* 
    ** 문제 1052
        지민 N개의 물병 가지고 있음.
        이 물병은 물을 무한대로 부을 수 있음.
        처음 모든 물병에는 물이 1리터씩.

        지민이는 이 물병을 다른 장소로 옮기려 함.
        지민이는 K개의 물병을 옮길 수 있음.

        지민이는 물을 낭비하기 싫음.
        이동을 한번보다 많이 하기 시름. (이동 1번 제한)

        => 물병의 물을 적절히 재분배해서, 
        k개를 넘지 않는 비어있지 않은 물병을 만들려함.

        물은 다음과 같이 재분배
        (		-- 제약조건임!
            1. 먼저 같은 양의 물이 들어 있는 물병 2개 고름
            2. 한 개의 물병에 다른 한 쪽에 있는 물을 모두 부음.
            3. 이 방법 필요한 만큼 반복
        )
        --> 이런 제약 때문에 N개로 K를 넘지않는 
        비어있지 않은 물병을 만드는것이 불가능할 수도.
        (새로운 물병을 살 수 있음. 상점의 물병은 물이 1리터 들어있음.)

        예를 들어 N=3이고 K=1일때, 물병 3개로 1개를 만드는 것.. 불가능.

        한 병을 또 다른 병에 부으면 2리터가 있는 물병하나. 
        1리터가 들어있는 물병하나가 남음.

        만약 상점에 한 개의 물병을 산다면, 
        2리터가 들어있는 물병 2개를 만들수 있고.
        마지막으로 4리터가 들어있는 물병을 한개 만들수 있음.
    
    1.입력
        첫째 줄에 N과 K가 주어진다. N은 10(7승)보다 작거나 같은 자연수이고, K는 1,000보다 작거나 같은 자연수이다.

    2. 출력
        첫째 줄에 상점에서 사야하는 물병의 최솟값을 출력한다. 만약 정답이 없을 경우에는 -1을 출력한다.
*/

/* 
    -- 물병 사지 않았을 시  
        (꼭 같은 량의 물병을 옮겨 담아야)
    N                                                                                                                       사용 물병       K = 1
    2 [1, 1]                                                    [2]                                                             1병        0       
    3 [1, 1, 1]                                                 [2, 1]                                                          2병        1
    4 [1, 1, 1, 1,]                                             [2, 2] > [4]                                                    1병        0
    5 [1, 1, 1, 1, 1,]                                          [2, 2, 1] > [4, 1]                                              2병        3 
    6 [1, 1, 1, 1, 1, 1,]                                       [2, 2, 2] > [4, 2]                                              2병        2
    7 [1, 1, 1, 1, 1, 1, 1, ]                                   [2, 2, 2, 1] > [4, 2, 1]                                        3병        1 
    8 [1, 1, 1, 1, 1, 1, 1, 1,]                                 [2, 2, 2, 2,] > [4, 4] > [8]                                    1병        0 
    9 [1, 1, 1, 1, 1, 1, 1, 1, 1]                               [2, 2, 2, 2, 1] > [4, 4, 1] > [8, 1]                            2병        7 

    10 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]                           [2, 2, 2, 2, 2] > [4, 4, 2] > [8, 2]                            2병        6
    11 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]                        [2, 2, 2, 2, 2, 1] > [4, 4, 2, 1] > [8, 2, 1]                   3병        5
    12 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]                     [2, 2, 2, 2, 2, 2] > [4, 4, 2, 2] > [8, 4]                      2병        4
    13 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]                  [2, 2, 2, 2, 2, 2, 1] > [4, 4, 2, 2, 1] > [8, 4, 1]             3병        3
    14 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]               [2, 2, 2, 2, 2, 2, 2] > [4, 4, 2, 2, 2] > [8, 4, 2]             3병        2
    15 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]            [2, 2, 2, 2, 2, 2, 2, 1] > [4, 4, 2, 2, 2, 1] > [8, 4, 2, 1]    4병        1
    16 [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]         [2, 2, 2, 2, 2, 2, 2, 2] > [4, 4, 4, 4] > [8, 8] > [16]         1병        0        
*/

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

function main() {
    const arrInput = [];

    const getBottleCnt = (n) => {
        let resultCnt = 0;
        while (n > 0) {
            if (n % 2 === 1) {  // n이 1일 경우에도 1도 % 할꺼니까 cnt는 무조건++ 되겠다.                
                resultCnt++;
                n = (n-1) / 2;
            } else 
                n /= 2;                            
        }
        return resultCnt;
    };

    rl.on('line', (line) => {
        line.trim().split(" ").map((v) => arrInput.push(+v));
        rl.close();
    }).on('close', () => {
        const [n, k] = arrInput;
        let nTmp = n;
        
        while (true) {            
            // k는 한번에 들고 갈 수 있는 물병 수. 즉, 딱 들어 맞게 (===) 이러지 않아도 됌. (시간초과도 걸림)
            // getBottleCnt에서 4가 나왔는데 k는 5다? 그냥 들고가는거야~~ break.
            if (getBottleCnt(nTmp) <= k)   break;
            else {                
                nTmp++;
            }            
        };
        console.log(nTmp - n);
        process.exit();
    });
};  
main();